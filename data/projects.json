[
  {
    "id": "tech stack guide",
    "title": "StackMentor.io",
    "blurb": "Building a cross-platform desktop application with Electron and React to guide developers in selecting, configuring, and scaffolding full-stack projects with AI-powered step-by-step assistance.",
    "descriptionMD": "## StackMentor.io\n\nA guided tech stack helper app that assists developers in building modern full-stack applications.\n\n### Architecture\n- **Frontend**: React + TypeScript + Tailwind CSS\n- **Desktop Framework**: Electron for cross-platform support\n- **AI Integration**: OpenAI GPT-4 for personalized guidance\n- **State Management**: Zustand\n- **Database**: Local SQLite for storing progress and preferences\n\n### Key Features\n- Interactive stack selection wizard\n- AI-powered configuration steps\n- Automatic project scaffolding\n- Global hotkey support for instant access\n- Cross-platform compatibility (Windows, macOS, Linux)",
    "tech": ["React", "TypeScript", "Tailwind CSS", "Electron", "OpenAI", "Zustand", "SQLite"],
    "image": "/images/stackMentor.png",
    "liveUrl": "https://stackmentor.io",
    "githubUrl": "https://github.com/carlpaolino/StackMentor.io"
  },
  {
    "id": "activity-planner",
    "title": "QuickMap",
    "blurb": "Developed an intelligent activity planner using Google Maps Places API and SeatGeek API, featuring suggested activities and events based on user location and preferences.",
    "descriptionMD": "## Activity Planner\n\nAn intelligent activity planner using Google Maps Places API and SeatGeek API, featuring suggested activities and events based on user location and preferences.\n\n### Architecture\n- **Frontend**: React with TypeScript and Material-UI\n- **Backend**: Node.js with Express\n- **AI Integration**: OpenAI GPT-4 API with custom fine-tuning\n- **Database**: MongoDB\n\n### Key Features\n- Real-time location-based activity directory\n- Activity Categorization(fun, hikes, food, etc.)\n- Detailed activity planning\n- Modern, responsive UI\n- Future IOS app integration ready",
    "tech": ["Next.js", "Python", "FastAPI", "OpenAI", "PostgreSQL"],
    "image": "/images/QuickMapImage.png",
    "liveUrl": "",
    "githubUrl": "https://github.com/carlpaolino/Quick-Map"
  },
  {
    "id": "fitness-app",
    "title": "FitJacket",
    "blurb": "Developed a fully functional fitness app using Django and a combination of APIs to track progress and provide personalized recommendations.",
    "descriptionMD": "## FitJacket\n\nPersonaled Fitness app for the elderly and disabled\n\n### Architecture\n- **Frontend**: Python with HTML, CSS, and JavaScript\n- **API Integration**: OpenAI for fitness recommendations, Strava for activity tracking\n- **Database**: SQLite\n\n### Key Features\n- AI Suggested Activities\n- Friendly features: Light Contrast Mode, Large Text\n- Strava integration\n- Modern, responsive UI,",
    "tech": ["Python", "Django", "OpenAI", "Strava", "SQLite"],
    "image": "/images/fitjacketimage.png",
    "liveUrl": "https://fitjacket.onrender.com/",
    "githubUrl": "https://github.com/acezth/CS2340_FitJacket"
  },
  {
    "id": "medical ai assistant",
    "title": "MedGPT",
    "blurb": "Building a conversational medical assistant that delivers instant, safe, and reliable medical guidance using AI technology, with built-in safety features and structured citations.",
    "descriptionMD": "## MedGPT\n\nA web-based conversational assistant providing medical information with safety-focused features and structured citations.\n\n### Architecture\n- **Frontend**: React 18, TypeScript, Tailwind CSS for a modern, responsive chat interface\n- **Backend**: Node.js with Express for secure API endpoints and business logic\n- **AI**: OpenAI GPT-4 API (configurable for other LLMs) for generating medical guidance\n- **Database**: SQLite in development and PostgreSQL in production for session storage and logs\n\n### Key Features\n- ChatGPT-style conversational UI with light/dark mode\n- Structured citations linking responses to medical literature\n- Safety guardrails including disclaimers and content filtering\n- Triage recommendations to suggest appropriate care levels\n- Exportable chat transcripts for patient-doctor communication\n- Responsive design for seamless desktop and mobile experience",
    "tech": [
      "React",
      "TypeScript",
      "Tailwind CSS",
      "Node.js",
      "Express",
      "OpenAI",
      "SQLite",
      "PostgreSQL",
      "Docker"
    ],
    "image": "/images/medicalGPT.png",
    "liveUrl": "https://medicalgpt.netlify.app",
    "githubUrl": "https://github.com/carlpaolino/MedicalGPT"
  },
  {
    "id": "mock interview platform",
    "title": "InterviewBot",
    "blurb": "Building a scalable mock interview platform with AI-driven question analysis and a rich UI for CS students to practice coding patterns and prepare for technical interviews.",
    "descriptionMD": "## InterviewBot\n\nA mock interview platform helping CS majors practice LeetCode-style questions with a focus on patterns and structured interview prep.\n\n### Architecture\n- **Frontend**: React/Next.js + Tailwind CSS for an interactive chat-based UI\n- **Backend**: Node.js (Express/Fastify) or Python (FastAPI) for REST/GraphQL APIs, session management, and integration with LLMs\n- **Scraper**: Python-based microservice scraping fresh interview questions from LeetCode, GeeksforGeeks, and more\n- **Database**: PostgreSQL for structured data, with optional vector DB (Pinecone/Weaviate) for semantic search\n\n### Key Features\n- AI-powered interview agent that asks, analyzes, and scores coding answers\n- Pattern-based question selection to target user weaknesses\n- Interactive UI with timers, hints, and real-time feedback\n- Persistent history of interview sessions\n- Scraper service that keeps the question bank updated automatically\n- Dockerized microservices architecture for easy deployment",
    "tech": [
      "React",
      "Next.js",
      "Tailwind CSS",
      "Node.js",
      "FastAPI",
      "Python",
      "Scrapy",
      "PostgreSQL",
      "Docker"
    ],
    "image": "/images/interviewBot.png",
    "liveUrl": "",
    "githubUrl": "https://github.com/carlpaolino/Interview-Bot"
  }
] 